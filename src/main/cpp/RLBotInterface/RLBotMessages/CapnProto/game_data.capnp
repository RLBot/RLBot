@0xcb4ac4a4827ed032; # unique file ID, generated by `capnp id`

using Cxx = import "/capnp/c++.capnp";
$Cxx.namespace("rlbot");

struct ControllerState {
  throttle @0 :Float32; # -1 for full reverse, 1 for full forward
  steer @1 :Float32; # -1 for full left, 1 for full right
  pitch @2 :Float32; # -1 for nose down, 1 for nose up
  yaw @3 :Float32; # -1 for full left, 1 for full right
  roll @4 :Float32; # -1 for roll left, 1 for roll right
  jump @5 :Bool;
  boost @6 :Bool;
  handbrake @7 :Bool;
}

struct PlayerInput {
  playerIndex @0 :Int32;
  controllerState @1 :ControllerState;
}

# Values are in "unreal units"
struct Vector3 {
  x @0 :Float32;
  y @1 :Float32;
  z @2 :Float32;
}

# Values are in radians
struct Rotator {
  pitch @0 :Float32;
  yaw @1 :Float32;
  roll @2 :Float32;
}

struct Touch {
  playerName @0 :Text;
  gameSeconds @1 :Float32;  # Seconds elapsed since the beginning of the game at the time of the touch
  location @2 :Vector3;
  normal @3 :Vector3;
}

struct ScoreInfo {
  score @0 :Int32;
  goals @1 :Int32;
  ownGoals @2 :Int32;
  assists @3 :Int32;
  saves @4 :Int32;
  shots @5 :Int32;
  demolitions @6 :Int32;
}

struct PlayerInfo {
  location @0 :Vector3;
  rotation @1 :Rotator;
  velocity @2 :Vector3;
  angularVelocity @3 :Vector3;
  scoreInfo @4 :ScoreInfo;
  isDemolished @5 :Bool;
  isMidair @6 :Bool;
  isSupersonic @7 :Bool;
  isBot @8 :Bool;
  jumped @9 :Bool;
  doubleJumped @10 :Bool;
  name @11 :Text;
  team @12 :Int32;
  boost @13 :Int32;
}

struct BallInfo {
  location @0 :Vector3;
  rotation @1 :Rotator;
  velocity @2 :Vector3;
  angularVelocity @3 :Vector3;
  latestTouch @4 :Touch;
}

struct BoostInfo {
  location @0 :Vector3;
  isActive @1 :Bool;
  timer @2 :Float32;
}

struct GameInfo {
  secondsElapsed @0 :Float32;
  gameTimeRemaining @1 :Float32;
  isOvertime @2 :Bool;
  isUnlimitedTime @3 :Bool;
  isRoundActive @4 :Bool;
  isKickoffPause @5 :Bool;
  isMatchEnded @6 :Bool;
}

struct GameTickPacket {
  players @0 :List(PlayerInfo);
  playerIndex @1 :Int32;
  boostPads @2 :List(BoostInfo);
  ball @3 :BallInfo;
  gameInfo @4 :GameInfo;
}


######################################################################################
# This section deals with desired game state, useful for teleporting cars around, etc.
######################################################################################


# Values are in "unreal units"
struct Vector3Partial {
  x :union {
    unset @0 :Void;
	value @1 :Float32;
  }
  y :union {
    unset @2 :Void;
	value @3 :Float32;
  }
  z :union {
    unset @4 :Void;
	value @5 :Float32;
  }
}

# Values are in radians
struct RotatorPartial {
  pitch :union {
	unset @0 :Void;
	value @1 :Float32;
  }
  yaw :union {
	unset @2 :Void;
	value @3 :Float32;
  }
  roll :union {
	unset @4 :Void;
	value @5 :Float32;
  }
}

struct DesiredPhysics {
  location @0 :Vector3Partial;
  rotation @1 :RotatorPartial;
  velocity @2 :Vector3Partial;
  angularVelocity @3 :Vector3Partial;
}

struct DesiredBallState {
  physics @0 :DesiredPhysics;
}

struct DesiredCarState {
  physics @0 :DesiredPhysics;
}


struct DesiredGameState {
  ballState @0 :DesiredBallState;
  carSates @1 :List(DesiredCarState);
}
