// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rlbot {
namespace api {

namespace {

const ::google::protobuf::Descriptor* ControllerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rotator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rotator_reflection_ = NULL;
const ::google::protobuf::Descriptor* Touch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Touch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoostInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoostInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameTickPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameTickPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fdata_2eproto() {
  protobuf_AddDesc_game_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_data.proto");
  GOOGLE_CHECK(file != NULL);
  ControllerState_descriptor_ = file->message_type(0);
  static const int ControllerState_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, throttle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, steer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, jump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, boost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, handbrake_),
  };
  ControllerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControllerState_descriptor_,
      ControllerState::default_instance_,
      ControllerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControllerState));
  PlayerInput_descriptor_ = file->message_type(1);
  static const int PlayerInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInput, player_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInput, controller_state_),
  };
  PlayerInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInput_descriptor_,
      PlayerInput::default_instance_,
      PlayerInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInput));
  Vector3_descriptor_ = file->message_type(2);
  static const int Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  };
  Vector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3_descriptor_,
      Vector3::default_instance_,
      Vector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3));
  Rotator_descriptor_ = file->message_type(3);
  static const int Rotator_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotator, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotator, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotator, roll_),
  };
  Rotator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rotator_descriptor_,
      Rotator::default_instance_,
      Rotator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rotator));
  Touch_descriptor_ = file->message_type(4);
  static const int Touch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, game_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, normal_),
  };
  Touch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Touch_descriptor_,
      Touch::default_instance_,
      Touch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Touch));
  ScoreInfo_descriptor_ = file->message_type(5);
  static const int ScoreInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, goals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, own_goals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, saves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, shots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, demolitions_),
  };
  ScoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreInfo_descriptor_,
      ScoreInfo::default_instance_,
      ScoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreInfo));
  PlayerInfo_descriptor_ = file->message_type(6);
  static const int PlayerInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, angular_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, score_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, is_demolished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, is_midair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, is_supersonic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, is_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, jumped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, double_jumped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, boost_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
  BallInfo_descriptor_ = file->message_type(7);
  static const int BallInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, angular_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, latest_touch_),
  };
  BallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallInfo_descriptor_,
      BallInfo::default_instance_,
      BallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallInfo));
  BoostInfo_descriptor_ = file->message_type(8);
  static const int BoostInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoostInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoostInfo, is_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoostInfo, timer_),
  };
  BoostInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoostInfo_descriptor_,
      BoostInfo::default_instance_,
      BoostInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoostInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoostInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoostInfo));
  GameInfo_descriptor_ = file->message_type(9);
  static const int GameInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, seconds_elapsed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, game_time_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, is_overtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, is_unlimited_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, is_round_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, is_kickoff_pause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, is_match_ended_),
  };
  GameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameInfo_descriptor_,
      GameInfo::default_instance_,
      GameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameInfo));
  GameTickPacket_descriptor_ = file->message_type(10);
  static const int GameTickPacket_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTickPacket, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTickPacket, player_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTickPacket, boost_pads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTickPacket, ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTickPacket, game_info_),
  };
  GameTickPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameTickPacket_descriptor_,
      GameTickPacket::default_instance_,
      GameTickPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTickPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTickPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameTickPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControllerState_descriptor_, &ControllerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInput_descriptor_, &PlayerInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3_descriptor_, &Vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rotator_descriptor_, &Rotator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Touch_descriptor_, &Touch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreInfo_descriptor_, &ScoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallInfo_descriptor_, &BallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoostInfo_descriptor_, &BoostInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameInfo_descriptor_, &GameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameTickPacket_descriptor_, &GameTickPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fdata_2eproto() {
  delete ControllerState::default_instance_;
  delete ControllerState_reflection_;
  delete PlayerInput::default_instance_;
  delete PlayerInput_reflection_;
  delete Vector3::default_instance_;
  delete Vector3_reflection_;
  delete Rotator::default_instance_;
  delete Rotator_reflection_;
  delete Touch::default_instance_;
  delete Touch_reflection_;
  delete ScoreInfo::default_instance_;
  delete ScoreInfo_reflection_;
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete BallInfo::default_instance_;
  delete BallInfo_reflection_;
  delete BoostInfo::default_instance_;
  delete BoostInfo_reflection_;
  delete GameInfo::default_instance_;
  delete GameInfo_reflection_;
  delete GameTickPacket::default_instance_;
  delete GameTickPacket_reflection_;
}

void protobuf_AddDesc_game_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017game_data.proto\022\trlbot.api\"\214\001\n\017Control"
    "lerState\022\020\n\010throttle\030\001 \002(\002\022\r\n\005steer\030\002 \002("
    "\002\022\r\n\005pitch\030\003 \002(\002\022\013\n\003yaw\030\004 \002(\002\022\014\n\004roll\030\005 "
    "\002(\002\022\014\n\004jump\030\006 \002(\010\022\r\n\005boost\030\007 \002(\010\022\021\n\thand"
    "brake\030\010 \002(\010\"Y\n\013PlayerInput\022\024\n\014player_ind"
    "ex\030\001 \002(\005\0224\n\020controller_state\030\002 \002(\0132\032.rlb"
    "ot.api.ControllerState\"*\n\007Vector3\022\t\n\001x\030\001"
    " \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"3\n\007Rotator\022\r\n"
    "\005pitch\030\001 \002(\002\022\013\n\003yaw\030\002 \002(\002\022\014\n\004roll\030\003 \002(\002\""
    "|\n\005Touch\022\023\n\013player_name\030\001 \002(\t\022\024\n\014game_se"
    "conds\030\002 \002(\002\022$\n\010location\030\003 \002(\0132\022.rlbot.ap"
    "i.Vector3\022\"\n\006normal\030\004 \002(\0132\022.rlbot.api.Ve"
    "ctor3\"\200\001\n\tScoreInfo\022\r\n\005score\030\001 \002(\005\022\r\n\005go"
    "als\030\002 \002(\005\022\021\n\town_goals\030\003 \002(\005\022\017\n\007assists\030"
    "\004 \002(\005\022\r\n\005saves\030\005 \002(\005\022\r\n\005shots\030\006 \002(\005\022\023\n\013d"
    "emolitions\030\007 \002(\005\"\371\002\n\nPlayerInfo\022$\n\010locat"
    "ion\030\001 \002(\0132\022.rlbot.api.Vector3\022$\n\010rotatio"
    "n\030\002 \002(\0132\022.rlbot.api.Rotator\022$\n\010velocity\030"
    "\003 \002(\0132\022.rlbot.api.Vector3\022,\n\020angular_vel"
    "ocity\030\004 \002(\0132\022.rlbot.api.Vector3\022(\n\nscore"
    "_info\030\005 \002(\0132\024.rlbot.api.ScoreInfo\022\025\n\ris_"
    "demolished\030\006 \002(\010\022\021\n\tis_midair\030\007 \002(\010\022\025\n\ri"
    "s_supersonic\030\010 \002(\010\022\016\n\006is_bot\030\t \002(\010\022\016\n\006ju"
    "mped\030\n \002(\010\022\025\n\rdouble_jumped\030\013 \002(\010\022\014\n\004nam"
    "e\030\014 \002(\t\022\014\n\004team\030\r \002(\005\022\r\n\005boost\030\016 \002(\005\"\374\001\n"
    "\010BallInfo\022$\n\010location\030\001 \002(\0132\022.rlbot.api."
    "Vector3\022$\n\010rotation\030\002 \002(\0132\022.rlbot.api.Ro"
    "tator\022$\n\010velocity\030\003 \002(\0132\022.rlbot.api.Vect"
    "or3\022,\n\020angular_velocity\030\004 \002(\0132\022.rlbot.ap"
    "i.Vector3\022(\n\014acceleration\030\005 \002(\0132\022.rlbot."
    "api.Vector3\022&\n\014latest_touch\030\006 \002(\0132\020.rlbo"
    "t.api.Touch\"S\n\tBoostInfo\022$\n\010location\030\001 \002"
    "(\0132\022.rlbot.api.Vector3\022\021\n\tis_active\030\002 \002("
    "\010\022\r\n\005timer\030\003 \002(\002\"\273\001\n\010GameInfo\022\027\n\017seconds"
    "_elapsed\030\001 \002(\002\022\033\n\023game_time_remaining\030\002 "
    "\002(\002\022\023\n\013is_overtime\030\003 \002(\010\022\031\n\021is_unlimited"
    "_time\030\004 \002(\010\022\027\n\017is_round_active\030\005 \002(\010\022\030\n\020"
    "is_kickoff_pause\030\006 \002(\010\022\026\n\016is_match_ended"
    "\030\007 \002(\010\"\303\001\n\016GameTickPacket\022&\n\007players\030\001 \003"
    "(\0132\025.rlbot.api.PlayerInfo\022\024\n\014player_inde"
    "x\030\002 \002(\005\022(\n\nboost_pads\030\003 \003(\0132\024.rlbot.api."
    "BoostInfo\022!\n\004ball\030\004 \002(\0132\023.rlbot.api.Ball"
    "Info\022&\n\tgame_info\030\005 \002(\0132\023.rlbot.api.Game"
    "Info", 1724);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_data.proto", &protobuf_RegisterTypes);
  ControllerState::default_instance_ = new ControllerState();
  PlayerInput::default_instance_ = new PlayerInput();
  Vector3::default_instance_ = new Vector3();
  Rotator::default_instance_ = new Rotator();
  Touch::default_instance_ = new Touch();
  ScoreInfo::default_instance_ = new ScoreInfo();
  PlayerInfo::default_instance_ = new PlayerInfo();
  BallInfo::default_instance_ = new BallInfo();
  BoostInfo::default_instance_ = new BoostInfo();
  GameInfo::default_instance_ = new GameInfo();
  GameTickPacket::default_instance_ = new GameTickPacket();
  ControllerState::default_instance_->InitAsDefaultInstance();
  PlayerInput::default_instance_->InitAsDefaultInstance();
  Vector3::default_instance_->InitAsDefaultInstance();
  Rotator::default_instance_->InitAsDefaultInstance();
  Touch::default_instance_->InitAsDefaultInstance();
  ScoreInfo::default_instance_->InitAsDefaultInstance();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  BallInfo::default_instance_->InitAsDefaultInstance();
  BoostInfo::default_instance_->InitAsDefaultInstance();
  GameInfo::default_instance_->InitAsDefaultInstance();
  GameTickPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fdata_2eproto {
  StaticDescriptorInitializer_game_5fdata_2eproto() {
    protobuf_AddDesc_game_5fdata_2eproto();
  }
} static_descriptor_initializer_game_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ControllerState::kThrottleFieldNumber;
const int ControllerState::kSteerFieldNumber;
const int ControllerState::kPitchFieldNumber;
const int ControllerState::kYawFieldNumber;
const int ControllerState::kRollFieldNumber;
const int ControllerState::kJumpFieldNumber;
const int ControllerState::kBoostFieldNumber;
const int ControllerState::kHandbrakeFieldNumber;
#endif  // !_MSC_VER

ControllerState::ControllerState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.ControllerState)
}

void ControllerState::InitAsDefaultInstance() {
}

ControllerState::ControllerState(const ControllerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.ControllerState)
}

void ControllerState::SharedCtor() {
  _cached_size_ = 0;
  throttle_ = 0;
  steer_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  roll_ = 0;
  jump_ = false;
  boost_ = false;
  handbrake_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControllerState::~ControllerState() {
  // @@protoc_insertion_point(destructor:rlbot.api.ControllerState)
  SharedDtor();
}

void ControllerState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ControllerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerState_descriptor_;
}

const ControllerState& ControllerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

ControllerState* ControllerState::default_instance_ = NULL;

ControllerState* ControllerState::New() const {
  return new ControllerState;
}

void ControllerState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ControllerState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(throttle_, handbrake_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControllerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.ControllerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float throttle = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_)));
          set_has_throttle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_steer;
        break;
      }

      // required float steer = 2;
      case 2: {
        if (tag == 21) {
         parse_steer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steer_)));
          set_has_steer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_pitch;
        break;
      }

      // required float pitch = 3;
      case 3: {
        if (tag == 29) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_yaw;
        break;
      }

      // required float yaw = 4;
      case 4: {
        if (tag == 37) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_roll;
        break;
      }

      // required float roll = 5;
      case 5: {
        if (tag == 45) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_jump;
        break;
      }

      // required bool jump = 6;
      case 6: {
        if (tag == 48) {
         parse_jump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jump_)));
          set_has_jump();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_boost;
        break;
      }

      // required bool boost = 7;
      case 7: {
        if (tag == 56) {
         parse_boost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boost_)));
          set_has_boost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_handbrake;
        break;
      }

      // required bool handbrake = 8;
      case 8: {
        if (tag == 64) {
         parse_handbrake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &handbrake_)));
          set_has_handbrake();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.ControllerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.ControllerState)
  return false;
#undef DO_
}

void ControllerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.ControllerState)
  // required float throttle = 1;
  if (has_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->throttle(), output);
  }

  // required float steer = 2;
  if (has_steer()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->steer(), output);
  }

  // required float pitch = 3;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch(), output);
  }

  // required float yaw = 4;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yaw(), output);
  }

  // required float roll = 5;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->roll(), output);
  }

  // required bool jump = 6;
  if (has_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->jump(), output);
  }

  // required bool boost = 7;
  if (has_boost()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->boost(), output);
  }

  // required bool handbrake = 8;
  if (has_handbrake()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->handbrake(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.ControllerState)
}

::google::protobuf::uint8* ControllerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.ControllerState)
  // required float throttle = 1;
  if (has_throttle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->throttle(), target);
  }

  // required float steer = 2;
  if (has_steer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->steer(), target);
  }

  // required float pitch = 3;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitch(), target);
  }

  // required float yaw = 4;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yaw(), target);
  }

  // required float roll = 5;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->roll(), target);
  }

  // required bool jump = 6;
  if (has_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->jump(), target);
  }

  // required bool boost = 7;
  if (has_boost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->boost(), target);
  }

  // required bool handbrake = 8;
  if (has_handbrake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->handbrake(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.ControllerState)
  return target;
}

int ControllerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float throttle = 1;
    if (has_throttle()) {
      total_size += 1 + 4;
    }

    // required float steer = 2;
    if (has_steer()) {
      total_size += 1 + 4;
    }

    // required float pitch = 3;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // required float yaw = 4;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // required float roll = 5;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // required bool jump = 6;
    if (has_jump()) {
      total_size += 1 + 1;
    }

    // required bool boost = 7;
    if (has_boost()) {
      total_size += 1 + 1;
    }

    // required bool handbrake = 8;
    if (has_handbrake()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControllerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControllerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControllerState::MergeFrom(const ControllerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_throttle()) {
      set_throttle(from.throttle());
    }
    if (from.has_steer()) {
      set_steer(from.steer());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_jump()) {
      set_jump(from.jump());
    }
    if (from.has_boost()) {
      set_boost(from.boost());
    }
    if (from.has_handbrake()) {
      set_handbrake(from.handbrake());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControllerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerState::CopyFrom(const ControllerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void ControllerState::Swap(ControllerState* other) {
  if (other != this) {
    std::swap(throttle_, other->throttle_);
    std::swap(steer_, other->steer_);
    std::swap(pitch_, other->pitch_);
    std::swap(yaw_, other->yaw_);
    std::swap(roll_, other->roll_);
    std::swap(jump_, other->jump_);
    std::swap(boost_, other->boost_);
    std::swap(handbrake_, other->handbrake_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControllerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerState_descriptor_;
  metadata.reflection = ControllerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInput::kPlayerIndexFieldNumber;
const int PlayerInput::kControllerStateFieldNumber;
#endif  // !_MSC_VER

PlayerInput::PlayerInput()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.PlayerInput)
}

void PlayerInput::InitAsDefaultInstance() {
  controller_state_ = const_cast< ::rlbot::api::ControllerState*>(&::rlbot::api::ControllerState::default_instance());
}

PlayerInput::PlayerInput(const PlayerInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.PlayerInput)
}

void PlayerInput::SharedCtor() {
  _cached_size_ = 0;
  player_index_ = 0;
  controller_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInput::~PlayerInput() {
  // @@protoc_insertion_point(destructor:rlbot.api.PlayerInput)
  SharedDtor();
}

void PlayerInput::SharedDtor() {
  if (this != default_instance_) {
    delete controller_state_;
  }
}

void PlayerInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInput_descriptor_;
}

const PlayerInput& PlayerInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

PlayerInput* PlayerInput::default_instance_ = NULL;

PlayerInput* PlayerInput::New() const {
  return new PlayerInput;
}

void PlayerInput::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    player_index_ = 0;
    if (has_controller_state()) {
      if (controller_state_ != NULL) controller_state_->::rlbot::api::ControllerState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.PlayerInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_index_)));
          set_has_player_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_controller_state;
        break;
      }

      // required .rlbot.api.ControllerState controller_state = 2;
      case 2: {
        if (tag == 18) {
         parse_controller_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controller_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.PlayerInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.PlayerInput)
  return false;
#undef DO_
}

void PlayerInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.PlayerInput)
  // required int32 player_index = 1;
  if (has_player_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_index(), output);
  }

  // required .rlbot.api.ControllerState controller_state = 2;
  if (has_controller_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->controller_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.PlayerInput)
}

::google::protobuf::uint8* PlayerInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.PlayerInput)
  // required int32 player_index = 1;
  if (has_player_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_index(), target);
  }

  // required .rlbot.api.ControllerState controller_state = 2;
  if (has_controller_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->controller_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.PlayerInput)
  return target;
}

int PlayerInput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_index = 1;
    if (has_player_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_index());
    }

    // required .rlbot.api.ControllerState controller_state = 2;
    if (has_controller_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->controller_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInput::MergeFrom(const PlayerInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_index()) {
      set_player_index(from.player_index());
    }
    if (from.has_controller_state()) {
      mutable_controller_state()->::rlbot::api::ControllerState::MergeFrom(from.controller_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInput::CopyFrom(const PlayerInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_controller_state()) {
    if (!this->controller_state().IsInitialized()) return false;
  }
  return true;
}

void PlayerInput::Swap(PlayerInput* other) {
  if (other != this) {
    std::swap(player_index_, other->player_index_);
    std::swap(controller_state_, other->controller_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInput_descriptor_;
  metadata.reflection = PlayerInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !_MSC_VER

Vector3::Vector3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.Vector3)
}

void Vector3::InitAsDefaultInstance() {
}

Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.Vector3)
}

void Vector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:rlbot.api.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3_descriptor_;
}

const Vector3& Vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

Vector3* Vector3::default_instance_ = NULL;

Vector3* Vector3::New() const {
  return new Vector3;
}

void Vector3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.Vector3)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.Vector3)
}

::google::protobuf::uint8* Vector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.Vector3)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.Vector3)
  return target;
}

int Vector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3_descriptor_;
  metadata.reflection = Vector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rotator::kPitchFieldNumber;
const int Rotator::kYawFieldNumber;
const int Rotator::kRollFieldNumber;
#endif  // !_MSC_VER

Rotator::Rotator()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.Rotator)
}

void Rotator::InitAsDefaultInstance() {
}

Rotator::Rotator(const Rotator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.Rotator)
}

void Rotator::SharedCtor() {
  _cached_size_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  roll_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rotator::~Rotator() {
  // @@protoc_insertion_point(destructor:rlbot.api.Rotator)
  SharedDtor();
}

void Rotator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rotator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rotator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rotator_descriptor_;
}

const Rotator& Rotator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

Rotator* Rotator::default_instance_ = NULL;

Rotator* Rotator::New() const {
  return new Rotator;
}

void Rotator::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Rotator*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pitch_, roll_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rotator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.Rotator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float pitch = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_yaw;
        break;
      }

      // required float yaw = 2;
      case 2: {
        if (tag == 21) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_roll;
        break;
      }

      // required float roll = 3;
      case 3: {
        if (tag == 29) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.Rotator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.Rotator)
  return false;
#undef DO_
}

void Rotator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.Rotator)
  // required float pitch = 1;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pitch(), output);
  }

  // required float yaw = 2;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw(), output);
  }

  // required float roll = 3;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roll(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.Rotator)
}

::google::protobuf::uint8* Rotator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.Rotator)
  // required float pitch = 1;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pitch(), target);
  }

  // required float yaw = 2;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw(), target);
  }

  // required float roll = 3;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roll(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.Rotator)
  return target;
}

int Rotator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float pitch = 1;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // required float yaw = 2;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // required float roll = 3;
    if (has_roll()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rotator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rotator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rotator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rotator::MergeFrom(const Rotator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rotator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rotator::CopyFrom(const Rotator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rotator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Rotator::Swap(Rotator* other) {
  if (other != this) {
    std::swap(pitch_, other->pitch_);
    std::swap(yaw_, other->yaw_);
    std::swap(roll_, other->roll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rotator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rotator_descriptor_;
  metadata.reflection = Rotator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Touch::kPlayerNameFieldNumber;
const int Touch::kGameSecondsFieldNumber;
const int Touch::kLocationFieldNumber;
const int Touch::kNormalFieldNumber;
#endif  // !_MSC_VER

Touch::Touch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.Touch)
}

void Touch::InitAsDefaultInstance() {
  location_ = const_cast< ::rlbot::api::Vector3*>(&::rlbot::api::Vector3::default_instance());
  normal_ = const_cast< ::rlbot::api::Vector3*>(&::rlbot::api::Vector3::default_instance());
}

Touch::Touch(const Touch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.Touch)
}

void Touch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_seconds_ = 0;
  location_ = NULL;
  normal_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Touch::~Touch() {
  // @@protoc_insertion_point(destructor:rlbot.api.Touch)
  SharedDtor();
}

void Touch::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_name_;
  }
  if (this != default_instance_) {
    delete location_;
    delete normal_;
  }
}

void Touch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Touch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Touch_descriptor_;
}

const Touch& Touch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

Touch* Touch::default_instance_ = NULL;

Touch* Touch::New() const {
  return new Touch;
}

void Touch::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_name_->clear();
      }
    }
    game_seconds_ = 0;
    if (has_location()) {
      if (location_ != NULL) location_->::rlbot::api::Vector3::Clear();
    }
    if (has_normal()) {
      if (normal_ != NULL) normal_->::rlbot::api::Vector3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Touch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.Touch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string player_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_game_seconds;
        break;
      }

      // required float game_seconds = 2;
      case 2: {
        if (tag == 21) {
         parse_game_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_seconds_)));
          set_has_game_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }

      // required .rlbot.api.Vector3 location = 3;
      case 3: {
        if (tag == 26) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_normal;
        break;
      }

      // required .rlbot.api.Vector3 normal = 4;
      case 4: {
        if (tag == 34) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.Touch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.Touch)
  return false;
#undef DO_
}

void Touch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.Touch)
  // required string player_name = 1;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->player_name(), output);
  }

  // required float game_seconds = 2;
  if (has_game_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->game_seconds(), output);
  }

  // required .rlbot.api.Vector3 location = 3;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->location(), output);
  }

  // required .rlbot.api.Vector3 normal = 4;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->normal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.Touch)
}

::google::protobuf::uint8* Touch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.Touch)
  // required string player_name = 1;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_name(), target);
  }

  // required float game_seconds = 2;
  if (has_game_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->game_seconds(), target);
  }

  // required .rlbot.api.Vector3 location = 3;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->location(), target);
  }

  // required .rlbot.api.Vector3 normal = 4;
  if (has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->normal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.Touch)
  return target;
}

int Touch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string player_name = 1;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // required float game_seconds = 2;
    if (has_game_seconds()) {
      total_size += 1 + 4;
    }

    // required .rlbot.api.Vector3 location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // required .rlbot.api.Vector3 normal = 4;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Touch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Touch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Touch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Touch::MergeFrom(const Touch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_game_seconds()) {
      set_game_seconds(from.game_seconds());
    }
    if (from.has_location()) {
      mutable_location()->::rlbot::api::Vector3::MergeFrom(from.location());
    }
    if (from.has_normal()) {
      mutable_normal()->::rlbot::api::Vector3::MergeFrom(from.normal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Touch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Touch::CopyFrom(const Touch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Touch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_normal()) {
    if (!this->normal().IsInitialized()) return false;
  }
  return true;
}

void Touch::Swap(Touch* other) {
  if (other != this) {
    std::swap(player_name_, other->player_name_);
    std::swap(game_seconds_, other->game_seconds_);
    std::swap(location_, other->location_);
    std::swap(normal_, other->normal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Touch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Touch_descriptor_;
  metadata.reflection = Touch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreInfo::kScoreFieldNumber;
const int ScoreInfo::kGoalsFieldNumber;
const int ScoreInfo::kOwnGoalsFieldNumber;
const int ScoreInfo::kAssistsFieldNumber;
const int ScoreInfo::kSavesFieldNumber;
const int ScoreInfo::kShotsFieldNumber;
const int ScoreInfo::kDemolitionsFieldNumber;
#endif  // !_MSC_VER

ScoreInfo::ScoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.ScoreInfo)
}

void ScoreInfo::InitAsDefaultInstance() {
}

ScoreInfo::ScoreInfo(const ScoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.ScoreInfo)
}

void ScoreInfo::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  goals_ = 0;
  own_goals_ = 0;
  assists_ = 0;
  saves_ = 0;
  shots_ = 0;
  demolitions_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreInfo::~ScoreInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.ScoreInfo)
  SharedDtor();
}

void ScoreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreInfo_descriptor_;
}

const ScoreInfo& ScoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

ScoreInfo* ScoreInfo::default_instance_ = NULL;

ScoreInfo* ScoreInfo::New() const {
  return new ScoreInfo;
}

void ScoreInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScoreInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(score_, demolitions_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.ScoreInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_goals;
        break;
      }

      // required int32 goals = 2;
      case 2: {
        if (tag == 16) {
         parse_goals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goals_)));
          set_has_goals();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_own_goals;
        break;
      }

      // required int32 own_goals = 3;
      case 3: {
        if (tag == 24) {
         parse_own_goals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &own_goals_)));
          set_has_own_goals();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_assists;
        break;
      }

      // required int32 assists = 4;
      case 4: {
        if (tag == 32) {
         parse_assists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assists_)));
          set_has_assists();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_saves;
        break;
      }

      // required int32 saves = 5;
      case 5: {
        if (tag == 40) {
         parse_saves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &saves_)));
          set_has_saves();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_shots;
        break;
      }

      // required int32 shots = 6;
      case 6: {
        if (tag == 48) {
         parse_shots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shots_)));
          set_has_shots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_demolitions;
        break;
      }

      // required int32 demolitions = 7;
      case 7: {
        if (tag == 56) {
         parse_demolitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &demolitions_)));
          set_has_demolitions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.ScoreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.ScoreInfo)
  return false;
#undef DO_
}

void ScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.ScoreInfo)
  // required int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // required int32 goals = 2;
  if (has_goals()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goals(), output);
  }

  // required int32 own_goals = 3;
  if (has_own_goals()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->own_goals(), output);
  }

  // required int32 assists = 4;
  if (has_assists()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->assists(), output);
  }

  // required int32 saves = 5;
  if (has_saves()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->saves(), output);
  }

  // required int32 shots = 6;
  if (has_shots()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->shots(), output);
  }

  // required int32 demolitions = 7;
  if (has_demolitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->demolitions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.ScoreInfo)
}

::google::protobuf::uint8* ScoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.ScoreInfo)
  // required int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  // required int32 goals = 2;
  if (has_goals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goals(), target);
  }

  // required int32 own_goals = 3;
  if (has_own_goals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->own_goals(), target);
  }

  // required int32 assists = 4;
  if (has_assists()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->assists(), target);
  }

  // required int32 saves = 5;
  if (has_saves()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->saves(), target);
  }

  // required int32 shots = 6;
  if (has_shots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->shots(), target);
  }

  // required int32 demolitions = 7;
  if (has_demolitions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->demolitions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.ScoreInfo)
  return target;
}

int ScoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 goals = 2;
    if (has_goals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goals());
    }

    // required int32 own_goals = 3;
    if (has_own_goals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->own_goals());
    }

    // required int32 assists = 4;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assists());
    }

    // required int32 saves = 5;
    if (has_saves()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->saves());
    }

    // required int32 shots = 6;
    if (has_shots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shots());
    }

    // required int32 demolitions = 7;
    if (has_demolitions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->demolitions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreInfo::MergeFrom(const ScoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_goals()) {
      set_goals(from.goals());
    }
    if (from.has_own_goals()) {
      set_own_goals(from.own_goals());
    }
    if (from.has_assists()) {
      set_assists(from.assists());
    }
    if (from.has_saves()) {
      set_saves(from.saves());
    }
    if (from.has_shots()) {
      set_shots(from.shots());
    }
    if (from.has_demolitions()) {
      set_demolitions(from.demolitions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreInfo::CopyFrom(const ScoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ScoreInfo::Swap(ScoreInfo* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(goals_, other->goals_);
    std::swap(own_goals_, other->own_goals_);
    std::swap(assists_, other->assists_);
    std::swap(saves_, other->saves_);
    std::swap(shots_, other->shots_);
    std::swap(demolitions_, other->demolitions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreInfo_descriptor_;
  metadata.reflection = ScoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kLocationFieldNumber;
const int PlayerInfo::kRotationFieldNumber;
const int PlayerInfo::kVelocityFieldNumber;
const int PlayerInfo::kAngularVelocityFieldNumber;
const int PlayerInfo::kScoreInfoFieldNumber;
const int PlayerInfo::kIsDemolishedFieldNumber;
const int PlayerInfo::kIsMidairFieldNumber;
const int PlayerInfo::kIsSupersonicFieldNumber;
const int PlayerInfo::kIsBotFieldNumber;
const int PlayerInfo::kJumpedFieldNumber;
const int PlayerInfo::kDoubleJumpedFieldNumber;
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kTeamFieldNumber;
const int PlayerInfo::kBoostFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.PlayerInfo)
}

void PlayerInfo::InitAsDefaultInstance() {
  location_ = const_cast< ::rlbot::api::Vector3*>(&::rlbot::api::Vector3::default_instance());
  rotation_ = const_cast< ::rlbot::api::Rotator*>(&::rlbot::api::Rotator::default_instance());
  velocity_ = const_cast< ::rlbot::api::Vector3*>(&::rlbot::api::Vector3::default_instance());
  angular_velocity_ = const_cast< ::rlbot::api::Vector3*>(&::rlbot::api::Vector3::default_instance());
  score_info_ = const_cast< ::rlbot::api::ScoreInfo*>(&::rlbot::api::ScoreInfo::default_instance());
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  location_ = NULL;
  rotation_ = NULL;
  velocity_ = NULL;
  angular_velocity_ = NULL;
  score_info_ = NULL;
  is_demolished_ = false;
  is_midair_ = false;
  is_supersonic_ = false;
  is_bot_ = false;
  jumped_ = false;
  double_jumped_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_ = 0;
  boost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete location_;
    delete rotation_;
    delete velocity_;
    delete angular_velocity_;
    delete score_info_;
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(is_demolished_, is_supersonic_);
    if (has_location()) {
      if (location_ != NULL) location_->::rlbot::api::Vector3::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::rlbot::api::Rotator::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::rlbot::api::Vector3::Clear();
    }
    if (has_angular_velocity()) {
      if (angular_velocity_ != NULL) angular_velocity_->::rlbot::api::Vector3::Clear();
    }
    if (has_score_info()) {
      if (score_info_ != NULL) score_info_->::rlbot::api::ScoreInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(is_bot_, double_jumped_);
    ZR_(team_, boost_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rlbot.api.Vector3 location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rotation;
        break;
      }

      // required .rlbot.api.Rotator rotation = 2;
      case 2: {
        if (tag == 18) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_velocity;
        break;
      }

      // required .rlbot.api.Vector3 velocity = 3;
      case 3: {
        if (tag == 26) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_angular_velocity;
        break;
      }

      // required .rlbot.api.Vector3 angular_velocity = 4;
      case 4: {
        if (tag == 34) {
         parse_angular_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_score_info;
        break;
      }

      // required .rlbot.api.ScoreInfo score_info = 5;
      case 5: {
        if (tag == 42) {
         parse_score_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_score_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_demolished;
        break;
      }

      // required bool is_demolished = 6;
      case 6: {
        if (tag == 48) {
         parse_is_demolished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_demolished_)));
          set_has_is_demolished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_midair;
        break;
      }

      // required bool is_midair = 7;
      case 7: {
        if (tag == 56) {
         parse_is_midair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_midair_)));
          set_has_is_midair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_supersonic;
        break;
      }

      // required bool is_supersonic = 8;
      case 8: {
        if (tag == 64) {
         parse_is_supersonic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_supersonic_)));
          set_has_is_supersonic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_bot;
        break;
      }

      // required bool is_bot = 9;
      case 9: {
        if (tag == 72) {
         parse_is_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bot_)));
          set_has_is_bot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_jumped;
        break;
      }

      // required bool jumped = 10;
      case 10: {
        if (tag == 80) {
         parse_jumped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jumped_)));
          set_has_jumped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_double_jumped;
        break;
      }

      // required bool double_jumped = 11;
      case 11: {
        if (tag == 88) {
         parse_double_jumped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &double_jumped_)));
          set_has_double_jumped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_name;
        break;
      }

      // required string name = 12;
      case 12: {
        if (tag == 98) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_team;
        break;
      }

      // required int32 team = 13;
      case 13: {
        if (tag == 104) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_boost;
        break;
      }

      // required int32 boost = 14;
      case 14: {
        if (tag == 112) {
         parse_boost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boost_)));
          set_has_boost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.PlayerInfo)
  // required .rlbot.api.Vector3 location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location(), output);
  }

  // required .rlbot.api.Rotator rotation = 2;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rotation(), output);
  }

  // required .rlbot.api.Vector3 velocity = 3;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->velocity(), output);
  }

  // required .rlbot.api.Vector3 angular_velocity = 4;
  if (has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->angular_velocity(), output);
  }

  // required .rlbot.api.ScoreInfo score_info = 5;
  if (has_score_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->score_info(), output);
  }

  // required bool is_demolished = 6;
  if (has_is_demolished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_demolished(), output);
  }

  // required bool is_midair = 7;
  if (has_is_midair()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_midair(), output);
  }

  // required bool is_supersonic = 8;
  if (has_is_supersonic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_supersonic(), output);
  }

  // required bool is_bot = 9;
  if (has_is_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_bot(), output);
  }

  // required bool jumped = 10;
  if (has_jumped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->jumped(), output);
  }

  // required bool double_jumped = 11;
  if (has_double_jumped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->double_jumped(), output);
  }

  // required string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->name(), output);
  }

  // required int32 team = 13;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->team(), output);
  }

  // required int32 boost = 14;
  if (has_boost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->boost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.PlayerInfo)
  // required .rlbot.api.Vector3 location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }

  // required .rlbot.api.Rotator rotation = 2;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rotation(), target);
  }

  // required .rlbot.api.Vector3 velocity = 3;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->velocity(), target);
  }

  // required .rlbot.api.Vector3 angular_velocity = 4;
  if (has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->angular_velocity(), target);
  }

  // required .rlbot.api.ScoreInfo score_info = 5;
  if (has_score_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->score_info(), target);
  }

  // required bool is_demolished = 6;
  if (has_is_demolished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_demolished(), target);
  }

  // required bool is_midair = 7;
  if (has_is_midair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_midair(), target);
  }

  // required bool is_supersonic = 8;
  if (has_is_supersonic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_supersonic(), target);
  }

  // required bool is_bot = 9;
  if (has_is_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_bot(), target);
  }

  // required bool jumped = 10;
  if (has_jumped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->jumped(), target);
  }

  // required bool double_jumped = 11;
  if (has_double_jumped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->double_jumped(), target);
  }

  // required string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }

  // required int32 team = 13;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->team(), target);
  }

  // required int32 boost = 14;
  if (has_boost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->boost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.PlayerInfo)
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rlbot.api.Vector3 location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // required .rlbot.api.Rotator rotation = 2;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

    // required .rlbot.api.Vector3 velocity = 3;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // required .rlbot.api.Vector3 angular_velocity = 4;
    if (has_angular_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angular_velocity());
    }

    // required .rlbot.api.ScoreInfo score_info = 5;
    if (has_score_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->score_info());
    }

    // required bool is_demolished = 6;
    if (has_is_demolished()) {
      total_size += 1 + 1;
    }

    // required bool is_midair = 7;
    if (has_is_midair()) {
      total_size += 1 + 1;
    }

    // required bool is_supersonic = 8;
    if (has_is_supersonic()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool is_bot = 9;
    if (has_is_bot()) {
      total_size += 1 + 1;
    }

    // required bool jumped = 10;
    if (has_jumped()) {
      total_size += 1 + 1;
    }

    // required bool double_jumped = 11;
    if (has_double_jumped()) {
      total_size += 1 + 1;
    }

    // required string name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 team = 13;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

    // required int32 boost = 14;
    if (has_boost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      mutable_location()->::rlbot::api::Vector3::MergeFrom(from.location());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::rlbot::api::Rotator::MergeFrom(from.rotation());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::rlbot::api::Vector3::MergeFrom(from.velocity());
    }
    if (from.has_angular_velocity()) {
      mutable_angular_velocity()->::rlbot::api::Vector3::MergeFrom(from.angular_velocity());
    }
    if (from.has_score_info()) {
      mutable_score_info()->::rlbot::api::ScoreInfo::MergeFrom(from.score_info());
    }
    if (from.has_is_demolished()) {
      set_is_demolished(from.is_demolished());
    }
    if (from.has_is_midair()) {
      set_is_midair(from.is_midair());
    }
    if (from.has_is_supersonic()) {
      set_is_supersonic(from.is_supersonic());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_bot()) {
      set_is_bot(from.is_bot());
    }
    if (from.has_jumped()) {
      set_jumped(from.jumped());
    }
    if (from.has_double_jumped()) {
      set_double_jumped(from.double_jumped());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_boost()) {
      set_boost(from.boost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_rotation()) {
    if (!this->rotation().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  if (has_angular_velocity()) {
    if (!this->angular_velocity().IsInitialized()) return false;
  }
  if (has_score_info()) {
    if (!this->score_info().IsInitialized()) return false;
  }
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(rotation_, other->rotation_);
    std::swap(velocity_, other->velocity_);
    std::swap(angular_velocity_, other->angular_velocity_);
    std::swap(score_info_, other->score_info_);
    std::swap(is_demolished_, other->is_demolished_);
    std::swap(is_midair_, other->is_midair_);
    std::swap(is_supersonic_, other->is_supersonic_);
    std::swap(is_bot_, other->is_bot_);
    std::swap(jumped_, other->jumped_);
    std::swap(double_jumped_, other->double_jumped_);
    std::swap(name_, other->name_);
    std::swap(team_, other->team_);
    std::swap(boost_, other->boost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallInfo::kLocationFieldNumber;
const int BallInfo::kRotationFieldNumber;
const int BallInfo::kVelocityFieldNumber;
const int BallInfo::kAngularVelocityFieldNumber;
const int BallInfo::kAccelerationFieldNumber;
const int BallInfo::kLatestTouchFieldNumber;
#endif  // !_MSC_VER

BallInfo::BallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.BallInfo)
}

void BallInfo::InitAsDefaultInstance() {
  location_ = const_cast< ::rlbot::api::Vector3*>(&::rlbot::api::Vector3::default_instance());
  rotation_ = const_cast< ::rlbot::api::Rotator*>(&::rlbot::api::Rotator::default_instance());
  velocity_ = const_cast< ::rlbot::api::Vector3*>(&::rlbot::api::Vector3::default_instance());
  angular_velocity_ = const_cast< ::rlbot::api::Vector3*>(&::rlbot::api::Vector3::default_instance());
  acceleration_ = const_cast< ::rlbot::api::Vector3*>(&::rlbot::api::Vector3::default_instance());
  latest_touch_ = const_cast< ::rlbot::api::Touch*>(&::rlbot::api::Touch::default_instance());
}

BallInfo::BallInfo(const BallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.BallInfo)
}

void BallInfo::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  rotation_ = NULL;
  velocity_ = NULL;
  angular_velocity_ = NULL;
  acceleration_ = NULL;
  latest_touch_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallInfo::~BallInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.BallInfo)
  SharedDtor();
}

void BallInfo::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
    delete rotation_;
    delete velocity_;
    delete angular_velocity_;
    delete acceleration_;
    delete latest_touch_;
  }
}

void BallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallInfo_descriptor_;
}

const BallInfo& BallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

BallInfo* BallInfo::default_instance_ = NULL;

BallInfo* BallInfo::New() const {
  return new BallInfo;
}

void BallInfo::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_location()) {
      if (location_ != NULL) location_->::rlbot::api::Vector3::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::rlbot::api::Rotator::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::rlbot::api::Vector3::Clear();
    }
    if (has_angular_velocity()) {
      if (angular_velocity_ != NULL) angular_velocity_->::rlbot::api::Vector3::Clear();
    }
    if (has_acceleration()) {
      if (acceleration_ != NULL) acceleration_->::rlbot::api::Vector3::Clear();
    }
    if (has_latest_touch()) {
      if (latest_touch_ != NULL) latest_touch_->::rlbot::api::Touch::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.BallInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rlbot.api.Vector3 location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rotation;
        break;
      }

      // required .rlbot.api.Rotator rotation = 2;
      case 2: {
        if (tag == 18) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_velocity;
        break;
      }

      // required .rlbot.api.Vector3 velocity = 3;
      case 3: {
        if (tag == 26) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_angular_velocity;
        break;
      }

      // required .rlbot.api.Vector3 angular_velocity = 4;
      case 4: {
        if (tag == 34) {
         parse_angular_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_acceleration;
        break;
      }

      // required .rlbot.api.Vector3 acceleration = 5;
      case 5: {
        if (tag == 42) {
         parse_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_latest_touch;
        break;
      }

      // required .rlbot.api.Touch latest_touch = 6;
      case 6: {
        if (tag == 50) {
         parse_latest_touch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latest_touch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.BallInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.BallInfo)
  return false;
#undef DO_
}

void BallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.BallInfo)
  // required .rlbot.api.Vector3 location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location(), output);
  }

  // required .rlbot.api.Rotator rotation = 2;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rotation(), output);
  }

  // required .rlbot.api.Vector3 velocity = 3;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->velocity(), output);
  }

  // required .rlbot.api.Vector3 angular_velocity = 4;
  if (has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->angular_velocity(), output);
  }

  // required .rlbot.api.Vector3 acceleration = 5;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->acceleration(), output);
  }

  // required .rlbot.api.Touch latest_touch = 6;
  if (has_latest_touch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->latest_touch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.BallInfo)
}

::google::protobuf::uint8* BallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.BallInfo)
  // required .rlbot.api.Vector3 location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }

  // required .rlbot.api.Rotator rotation = 2;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rotation(), target);
  }

  // required .rlbot.api.Vector3 velocity = 3;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->velocity(), target);
  }

  // required .rlbot.api.Vector3 angular_velocity = 4;
  if (has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->angular_velocity(), target);
  }

  // required .rlbot.api.Vector3 acceleration = 5;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->acceleration(), target);
  }

  // required .rlbot.api.Touch latest_touch = 6;
  if (has_latest_touch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->latest_touch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.BallInfo)
  return target;
}

int BallInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rlbot.api.Vector3 location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // required .rlbot.api.Rotator rotation = 2;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

    // required .rlbot.api.Vector3 velocity = 3;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // required .rlbot.api.Vector3 angular_velocity = 4;
    if (has_angular_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angular_velocity());
    }

    // required .rlbot.api.Vector3 acceleration = 5;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceleration());
    }

    // required .rlbot.api.Touch latest_touch = 6;
    if (has_latest_touch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->latest_touch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallInfo::MergeFrom(const BallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      mutable_location()->::rlbot::api::Vector3::MergeFrom(from.location());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::rlbot::api::Rotator::MergeFrom(from.rotation());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::rlbot::api::Vector3::MergeFrom(from.velocity());
    }
    if (from.has_angular_velocity()) {
      mutable_angular_velocity()->::rlbot::api::Vector3::MergeFrom(from.angular_velocity());
    }
    if (from.has_acceleration()) {
      mutable_acceleration()->::rlbot::api::Vector3::MergeFrom(from.acceleration());
    }
    if (from.has_latest_touch()) {
      mutable_latest_touch()->::rlbot::api::Touch::MergeFrom(from.latest_touch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallInfo::CopyFrom(const BallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_rotation()) {
    if (!this->rotation().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  if (has_angular_velocity()) {
    if (!this->angular_velocity().IsInitialized()) return false;
  }
  if (has_acceleration()) {
    if (!this->acceleration().IsInitialized()) return false;
  }
  if (has_latest_touch()) {
    if (!this->latest_touch().IsInitialized()) return false;
  }
  return true;
}

void BallInfo::Swap(BallInfo* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(rotation_, other->rotation_);
    std::swap(velocity_, other->velocity_);
    std::swap(angular_velocity_, other->angular_velocity_);
    std::swap(acceleration_, other->acceleration_);
    std::swap(latest_touch_, other->latest_touch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallInfo_descriptor_;
  metadata.reflection = BallInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoostInfo::kLocationFieldNumber;
const int BoostInfo::kIsActiveFieldNumber;
const int BoostInfo::kTimerFieldNumber;
#endif  // !_MSC_VER

BoostInfo::BoostInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.BoostInfo)
}

void BoostInfo::InitAsDefaultInstance() {
  location_ = const_cast< ::rlbot::api::Vector3*>(&::rlbot::api::Vector3::default_instance());
}

BoostInfo::BoostInfo(const BoostInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.BoostInfo)
}

void BoostInfo::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  is_active_ = false;
  timer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoostInfo::~BoostInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.BoostInfo)
  SharedDtor();
}

void BoostInfo::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void BoostInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoostInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoostInfo_descriptor_;
}

const BoostInfo& BoostInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

BoostInfo* BoostInfo::default_instance_ = NULL;

BoostInfo* BoostInfo::New() const {
  return new BoostInfo;
}

void BoostInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BoostInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(is_active_, timer_);
    if (has_location()) {
      if (location_ != NULL) location_->::rlbot::api::Vector3::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoostInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.BoostInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rlbot.api.Vector3 location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_active;
        break;
      }

      // required bool is_active = 2;
      case 2: {
        if (tag == 16) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_timer;
        break;
      }

      // required float timer = 3;
      case 3: {
        if (tag == 29) {
         parse_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.BoostInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.BoostInfo)
  return false;
#undef DO_
}

void BoostInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.BoostInfo)
  // required .rlbot.api.Vector3 location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location(), output);
  }

  // required bool is_active = 2;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_active(), output);
  }

  // required float timer = 3;
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->timer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.BoostInfo)
}

::google::protobuf::uint8* BoostInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.BoostInfo)
  // required .rlbot.api.Vector3 location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }

  // required bool is_active = 2;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_active(), target);
  }

  // required float timer = 3;
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->timer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.BoostInfo)
  return target;
}

int BoostInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rlbot.api.Vector3 location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // required bool is_active = 2;
    if (has_is_active()) {
      total_size += 1 + 1;
    }

    // required float timer = 3;
    if (has_timer()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoostInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoostInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoostInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoostInfo::MergeFrom(const BoostInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      mutable_location()->::rlbot::api::Vector3::MergeFrom(from.location());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
    if (from.has_timer()) {
      set_timer(from.timer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoostInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoostInfo::CopyFrom(const BoostInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoostInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  return true;
}

void BoostInfo::Swap(BoostInfo* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(is_active_, other->is_active_);
    std::swap(timer_, other->timer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoostInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoostInfo_descriptor_;
  metadata.reflection = BoostInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameInfo::kSecondsElapsedFieldNumber;
const int GameInfo::kGameTimeRemainingFieldNumber;
const int GameInfo::kIsOvertimeFieldNumber;
const int GameInfo::kIsUnlimitedTimeFieldNumber;
const int GameInfo::kIsRoundActiveFieldNumber;
const int GameInfo::kIsKickoffPauseFieldNumber;
const int GameInfo::kIsMatchEndedFieldNumber;
#endif  // !_MSC_VER

GameInfo::GameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.GameInfo)
}

void GameInfo::InitAsDefaultInstance() {
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.GameInfo)
}

void GameInfo::SharedCtor() {
  _cached_size_ = 0;
  seconds_elapsed_ = 0;
  game_time_remaining_ = 0;
  is_overtime_ = false;
  is_unlimited_time_ = false;
  is_round_active_ = false;
  is_kickoff_pause_ = false;
  is_match_ended_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.GameInfo)
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfo_descriptor_;
}

const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New() const {
  return new GameInfo;
}

void GameInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(seconds_elapsed_, is_match_ended_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.GameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float seconds_elapsed = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seconds_elapsed_)));
          set_has_seconds_elapsed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_game_time_remaining;
        break;
      }

      // required float game_time_remaining = 2;
      case 2: {
        if (tag == 21) {
         parse_game_time_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_time_remaining_)));
          set_has_game_time_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_overtime;
        break;
      }

      // required bool is_overtime = 3;
      case 3: {
        if (tag == 24) {
         parse_is_overtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_overtime_)));
          set_has_is_overtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_unlimited_time;
        break;
      }

      // required bool is_unlimited_time = 4;
      case 4: {
        if (tag == 32) {
         parse_is_unlimited_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unlimited_time_)));
          set_has_is_unlimited_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_round_active;
        break;
      }

      // required bool is_round_active = 5;
      case 5: {
        if (tag == 40) {
         parse_is_round_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_round_active_)));
          set_has_is_round_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_kickoff_pause;
        break;
      }

      // required bool is_kickoff_pause = 6;
      case 6: {
        if (tag == 48) {
         parse_is_kickoff_pause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_kickoff_pause_)));
          set_has_is_kickoff_pause();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_match_ended;
        break;
      }

      // required bool is_match_ended = 7;
      case 7: {
        if (tag == 56) {
         parse_is_match_ended:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_match_ended_)));
          set_has_is_match_ended();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.GameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.GameInfo)
  return false;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.GameInfo)
  // required float seconds_elapsed = 1;
  if (has_seconds_elapsed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->seconds_elapsed(), output);
  }

  // required float game_time_remaining = 2;
  if (has_game_time_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->game_time_remaining(), output);
  }

  // required bool is_overtime = 3;
  if (has_is_overtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_overtime(), output);
  }

  // required bool is_unlimited_time = 4;
  if (has_is_unlimited_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_unlimited_time(), output);
  }

  // required bool is_round_active = 5;
  if (has_is_round_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_round_active(), output);
  }

  // required bool is_kickoff_pause = 6;
  if (has_is_kickoff_pause()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_kickoff_pause(), output);
  }

  // required bool is_match_ended = 7;
  if (has_is_match_ended()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_match_ended(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.GameInfo)
}

::google::protobuf::uint8* GameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.GameInfo)
  // required float seconds_elapsed = 1;
  if (has_seconds_elapsed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->seconds_elapsed(), target);
  }

  // required float game_time_remaining = 2;
  if (has_game_time_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->game_time_remaining(), target);
  }

  // required bool is_overtime = 3;
  if (has_is_overtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_overtime(), target);
  }

  // required bool is_unlimited_time = 4;
  if (has_is_unlimited_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_unlimited_time(), target);
  }

  // required bool is_round_active = 5;
  if (has_is_round_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_round_active(), target);
  }

  // required bool is_kickoff_pause = 6;
  if (has_is_kickoff_pause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_kickoff_pause(), target);
  }

  // required bool is_match_ended = 7;
  if (has_is_match_ended()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_match_ended(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.GameInfo)
  return target;
}

int GameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float seconds_elapsed = 1;
    if (has_seconds_elapsed()) {
      total_size += 1 + 4;
    }

    // required float game_time_remaining = 2;
    if (has_game_time_remaining()) {
      total_size += 1 + 4;
    }

    // required bool is_overtime = 3;
    if (has_is_overtime()) {
      total_size += 1 + 1;
    }

    // required bool is_unlimited_time = 4;
    if (has_is_unlimited_time()) {
      total_size += 1 + 1;
    }

    // required bool is_round_active = 5;
    if (has_is_round_active()) {
      total_size += 1 + 1;
    }

    // required bool is_kickoff_pause = 6;
    if (has_is_kickoff_pause()) {
      total_size += 1 + 1;
    }

    // required bool is_match_ended = 7;
    if (has_is_match_ended()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds_elapsed()) {
      set_seconds_elapsed(from.seconds_elapsed());
    }
    if (from.has_game_time_remaining()) {
      set_game_time_remaining(from.game_time_remaining());
    }
    if (from.has_is_overtime()) {
      set_is_overtime(from.is_overtime());
    }
    if (from.has_is_unlimited_time()) {
      set_is_unlimited_time(from.is_unlimited_time());
    }
    if (from.has_is_round_active()) {
      set_is_round_active(from.is_round_active());
    }
    if (from.has_is_kickoff_pause()) {
      set_is_kickoff_pause(from.is_kickoff_pause());
    }
    if (from.has_is_match_ended()) {
      set_is_match_ended(from.is_match_ended());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other != this) {
    std::swap(seconds_elapsed_, other->seconds_elapsed_);
    std::swap(game_time_remaining_, other->game_time_remaining_);
    std::swap(is_overtime_, other->is_overtime_);
    std::swap(is_unlimited_time_, other->is_unlimited_time_);
    std::swap(is_round_active_, other->is_round_active_);
    std::swap(is_kickoff_pause_, other->is_kickoff_pause_);
    std::swap(is_match_ended_, other->is_match_ended_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInfo_descriptor_;
  metadata.reflection = GameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameTickPacket::kPlayersFieldNumber;
const int GameTickPacket::kPlayerIndexFieldNumber;
const int GameTickPacket::kBoostPadsFieldNumber;
const int GameTickPacket::kBallFieldNumber;
const int GameTickPacket::kGameInfoFieldNumber;
#endif  // !_MSC_VER

GameTickPacket::GameTickPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.GameTickPacket)
}

void GameTickPacket::InitAsDefaultInstance() {
  ball_ = const_cast< ::rlbot::api::BallInfo*>(&::rlbot::api::BallInfo::default_instance());
  game_info_ = const_cast< ::rlbot::api::GameInfo*>(&::rlbot::api::GameInfo::default_instance());
}

GameTickPacket::GameTickPacket(const GameTickPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.GameTickPacket)
}

void GameTickPacket::SharedCtor() {
  _cached_size_ = 0;
  player_index_ = 0;
  ball_ = NULL;
  game_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameTickPacket::~GameTickPacket() {
  // @@protoc_insertion_point(destructor:rlbot.api.GameTickPacket)
  SharedDtor();
}

void GameTickPacket::SharedDtor() {
  if (this != default_instance_) {
    delete ball_;
    delete game_info_;
  }
}

void GameTickPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameTickPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTickPacket_descriptor_;
}

const GameTickPacket& GameTickPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

GameTickPacket* GameTickPacket::default_instance_ = NULL;

GameTickPacket* GameTickPacket::New() const {
  return new GameTickPacket;
}

void GameTickPacket::Clear() {
  if (_has_bits_[0 / 32] & 26) {
    player_index_ = 0;
    if (has_ball()) {
      if (ball_ != NULL) ball_->::rlbot::api::BallInfo::Clear();
    }
    if (has_game_info()) {
      if (game_info_ != NULL) game_info_->::rlbot::api::GameInfo::Clear();
    }
  }
  players_.Clear();
  boost_pads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameTickPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.GameTickPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rlbot.api.PlayerInfo players = 1;
      case 1: {
        if (tag == 10) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(16)) goto parse_player_index;
        break;
      }

      // required int32 player_index = 2;
      case 2: {
        if (tag == 16) {
         parse_player_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_index_)));
          set_has_player_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_boost_pads;
        break;
      }

      // repeated .rlbot.api.BoostInfo boost_pads = 3;
      case 3: {
        if (tag == 26) {
         parse_boost_pads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boost_pads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_boost_pads;
        if (input->ExpectTag(34)) goto parse_ball;
        break;
      }

      // required .rlbot.api.BallInfo ball = 4;
      case 4: {
        if (tag == 34) {
         parse_ball:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_game_info;
        break;
      }

      // required .rlbot.api.GameInfo game_info = 5;
      case 5: {
        if (tag == 42) {
         parse_game_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.GameTickPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.GameTickPacket)
  return false;
#undef DO_
}

void GameTickPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.GameTickPacket)
  // repeated .rlbot.api.PlayerInfo players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // required int32 player_index = 2;
  if (has_player_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_index(), output);
  }

  // repeated .rlbot.api.BoostInfo boost_pads = 3;
  for (int i = 0; i < this->boost_pads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->boost_pads(i), output);
  }

  // required .rlbot.api.BallInfo ball = 4;
  if (has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ball(), output);
  }

  // required .rlbot.api.GameInfo game_info = 5;
  if (has_game_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->game_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rlbot.api.GameTickPacket)
}

::google::protobuf::uint8* GameTickPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.GameTickPacket)
  // repeated .rlbot.api.PlayerInfo players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // required int32 player_index = 2;
  if (has_player_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_index(), target);
  }

  // repeated .rlbot.api.BoostInfo boost_pads = 3;
  for (int i = 0; i < this->boost_pads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->boost_pads(i), target);
  }

  // required .rlbot.api.BallInfo ball = 4;
  if (has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ball(), target);
  }

  // required .rlbot.api.GameInfo game_info = 5;
  if (has_game_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->game_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.GameTickPacket)
  return target;
}

int GameTickPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 player_index = 2;
    if (has_player_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_index());
    }

    // required .rlbot.api.BallInfo ball = 4;
    if (has_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball());
    }

    // required .rlbot.api.GameInfo game_info = 5;
    if (has_game_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_info());
    }

  }
  // repeated .rlbot.api.PlayerInfo players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated .rlbot.api.BoostInfo boost_pads = 3;
  total_size += 1 * this->boost_pads_size();
  for (int i = 0; i < this->boost_pads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boost_pads(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameTickPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameTickPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameTickPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameTickPacket::MergeFrom(const GameTickPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  boost_pads_.MergeFrom(from.boost_pads_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_player_index()) {
      set_player_index(from.player_index());
    }
    if (from.has_ball()) {
      mutable_ball()->::rlbot::api::BallInfo::MergeFrom(from.ball());
    }
    if (from.has_game_info()) {
      mutable_game_info()->::rlbot::api::GameInfo::MergeFrom(from.game_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameTickPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTickPacket::CopyFrom(const GameTickPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTickPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001a) != 0x0000001a) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->boost_pads())) return false;
  if (has_ball()) {
    if (!this->ball().IsInitialized()) return false;
  }
  if (has_game_info()) {
    if (!this->game_info().IsInitialized()) return false;
  }
  return true;
}

void GameTickPacket::Swap(GameTickPacket* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(player_index_, other->player_index_);
    boost_pads_.Swap(&other->boost_pads_);
    std::swap(ball_, other->ball_);
    std::swap(game_info_, other->game_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameTickPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameTickPacket_descriptor_;
  metadata.reflection = GameTickPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace rlbot

// @@protoc_insertion_point(global_scope)
