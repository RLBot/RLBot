
namespace rlbot.flat;

table ControllerState {
  /// -1 for full reverse, 1 for full forward
  throttle:float;

  /// -1 for full left, 1 for full right
  steer:float;

  /// -1 for nose down, 1 for nose up
  pitch:float;

  /// -1 for full left, 1 for full right
  yaw:float;

  /// -1 for roll left, 1 for roll right
  roll:float;

  /// true if you want to press the jump button
  jump:bool;

  /// true if you want to press the boost button
  boost:bool;

  /// true if you want to press the handbrake button
  handbrake:bool;
}

table PlayerInput {
  playerIndex:int;
  controllerState:ControllerState;
}

root_type PlayerInput;

// Values are in "unreal units"
struct Vector3 {
  x:float;
  y:float;
  z:float;
}

// Values are in radians
struct Rotator {
  pitch:float;
  yaw:float;
  roll:float;
}

table Touch {
  /// The name of the player involved with the touch.
  playerName:string;

  /// Seconds that had elapsed in the game when the touch occurred.
  gameSeconds:float;

  /// The point of contact for the touch.
  location:Vector3;

  /// The direction of the touch.
  normal:Vector3;
}

table ScoreInfo {
  score:int;
  goals:int;
  ownGoals:int;
  assists:int;
  saves:int;
  shots:int;
  demolitions:int;
}

table Physics {
  location:Vector3;
  rotation:Rotator;
  velocity:Vector3;
  angularVelocity:Vector3;
}

table PlayerInfo {
  physics:Physics;
  scoreInfo:ScoreInfo;
  isDemolished:bool;
  /// True if your wheels are on the ground, the wall, or the ceiling. False if you're midair or turtling.
  hasWheelContact:bool;
  isSupersonic:bool;
  isBot:bool;
  /// True if the player has jumped. Falling off the ceiling / driving off the goal post does not count.
  jumped:bool;
  ///  True if player has double jumped. False does not mean you have a jump remaining, because the
  ///  aerial timer can run out, and that doesn't affect this flag.
  doubleJumped:bool;
  name:string;
  team:int;
  boost:int;
}

table BallInfo {
  physics:Physics;
  latestTouch:Touch;
}

table BoostPadState {
  /// True if the boost can be picked up
  isActive:bool;

  /// The number of seconds since the boost has been picked up, or 0.0 if the boost is active.
  timer:float;
}

enum TileState: byte {
    Unknown = 0,
    /// The default state of the tiles.
    Filled = 1,
    /// The state when a tile has been damaged.
    Damaged = 2,
    /// The state of a tile when it is open and a goal can be scored.
    Open = 3
}

table DropshotTile {
  /// True if the tile is damaged
  tileState: TileState;
}

table GameInfo {
  secondsElapsed:float;
  gameTimeRemaining:float;
  isOvertime:bool;
  isUnlimitedTime:bool;
  /// True when cars are allowed to move, and during the pause menu. False during replays.
  isRoundActive:bool;
  /// Only true during a kickoff, when the car is allowed to move, and the ball has not been hit,
  /// and the game clock has not started yet. If both players sit still, game clock will eventually
  /// start and this will become false.
  isKickoffPause:bool;
  /// Turns true after final replay, the moment the 'winner' screen appears. Remains true during next match
  /// countdown. Turns false again the moment the 'choose team' screen appears.
  isMatchEnded:bool;
}

table GameTickPacket {
  players:[PlayerInfo];
  boostPadStates:[BoostPadState];
  ball:BallInfo;
  gameInfo:GameInfo;
  tileInformation:[DropshotTile];
}

root_type GameTickPacket;

// This section deals with arena information, e.g. where the goals and boost locations are.

table GoalInfo {
  teamNum:int;
  location:Vector3;
  direction:Vector3;
}

table BoostPad {
  location:Vector3;
  isFullBoost:bool;
}

table FieldInfo {
  boostPads:[BoostPad]; // These will be sorted according to (y * 100 + x), and BoostInfo will be provided in the same order.
  goals:[GoalInfo];
}

root_type FieldInfo;

// This section deals with desired game state, useful for teleporting cars around, etc.

struct Float {
  val:float;
}

struct Bool {
  val:bool;
}

// Values are in "unreal units"
table Vector3Partial {
  x:Float;
  y:Float;
  z:Float;
}

// Values are in radians
table RotatorPartial {
  pitch:Float;
  yaw:Float;
  roll:Float;
}

table DesiredPhysics {
  location:Vector3Partial;
  rotation:RotatorPartial;
  velocity:Vector3Partial;
  angularVelocity:Vector3Partial;
}

table DesiredBallState {
  physics:DesiredPhysics;
}

table DesiredCarState {
  physics:DesiredPhysics;
  boostAmount:Float;
  jumped:Bool;
  doubleJumped:Bool;
}

table DesiredBoostState {
  respawnTime:Float;
}

table DesiredGameState {
  ballState:DesiredBallState;
  carStates:[DesiredCarState];
  boostStates:[DesiredBoostState];
}

root_type DesiredGameState;

enum RenderType : byte {
    DrawLine2D = 1,
    DrawLine3D = 2,
    DrawLine2D_3D = 3,
    DrawRect2D = 4,
    DrawRect3D = 5,
    DrawString2D = 6,
    DrawString3D = 7,
    DrawCenteredRect3D = 8
}

table Color {
    a: ubyte = 0;
    r: ubyte = 0;
    g: ubyte = 0;
    b: ubyte = 0;
}

table RenderMessage {
    renderType: RenderType = 1;
    color: Color;
    /// For 2d renders this only grabs x and y
    start: Vector3;
    /// For 2d renders this only grabs x and y
    end:   Vector3;
    /// Scales the x size of the text/rectangle, is used for rectangles assuming an initial value of 1
    scaleX: int = 1;
    /// Scales the y size of the text/rectangle, is used for rectangles assuming an initial value of 1
    scaleY: int = 1;
    text: string;
    /// Rectangles can be filled or just outlines.
    isFilled: bool;
}

table RenderGroup {
    renderMessages:[RenderMessage];
    /// The id of the render group
    id: int;
}

root_type RenderGroup;


enum QuickChatSelection : byte {
    Information_IGotIt = 0,
	Information_NeedBoost = 1,
	Information_TakeTheShot = 2,
	Information_Defending = 3,
	Information_GoForIt = 4,
	Information_Centering = 5,
	Information_AllYours = 6,
	Information_InPosition = 7,
	Information_Incoming = 8,
	Compliments_NiceShot = 9,
	Compliments_GreatPass = 10,
	Compliments_Thanks = 11,
	Compliments_WhatASave = 12,
	Compliments_NiceOne = 13,
	Compliments_WhatAPlay = 14,
	Compliments_GreatClear = 15,
	Compliments_NiceBlock = 16,
	Reactions_OMG = 17,
	Reactions_Noooo = 18,
	Reactions_Wow = 19,
	Reactions_CloseOne = 20,
	Reactions_NoWay = 21,
	Reactions_HolyCow = 22,
	Reactions_Whew = 23,
	Reactions_Siiiick = 24,
	Reactions_Calculated = 25,
	Reactions_Savage = 26,
	Reactions_Okay = 27,
	Apologies_Cursing = 28,
	Apologies_NoProblem = 29,
	Apologies_Whoops = 30,
	Apologies_Sorry = 31,
	Apologies_MyBad = 32,
	Apologies_Oops = 33,
	Apologies_MyFault = 34,
	PostGame_Gg = 35,
	PostGame_WellPlayed = 36,
	PostGame_ThatWasFun = 37,
	PostGame_Rematch = 38,
	PostGame_OneMoreGame = 39,
	PostGame_WhatAGame = 40,
	PostGame_NiceMoves = 41,
	PostGame_EverybodyDance = 42,
	/// Custom text chats made by bot makers
	MaxPysonixQuickChatPresets = 43,
	/// Waste of CPU cycles
	Custom_Toxic_WasteCPU = 44,
	/// Git gud*
	Custom_Toxic_GitGut = 45,
	/// De-Allocate Yourself
	Custom_Toxic_DeAlloc = 46,
	/// 404: Your skill not found
	Custom_Toxic_404NoSkill = 47,
	/// Get a virus
	Custom_Toxic_CatchVirus = 48,
	/// Passing!
	Custom_Useful_Passing = 49,
	/// Faking!
	Custom_Useful_Faking = 50,
	/// Demoing!
	Custom_Useful_Demoing = 51,
	/// BOOPING
	Custom_Useful_Bumping = 52,
	/// The chances of that was 47525 to 1*
	Custom_Compliments_TinyChances = 53,
	/// Who upped your skill level?
	Custom_Compliments_SkillLevel = 54,
	/// Your programmer should be proud
	Custom_Compliments_proud = 55,
	/// You're the GC of Bots
	Custom_Compliments_GC = 56,
	/// Are you <Insert Pro>Bot? *
	Custom_Compliments_Pro = 57,
}

table QuickChat {
    quickChatSelection:      QuickChatSelection;

    /// The index of the player that sent the quick chat
    playerIndex:    int;

    /// True if the chat is team only false if everyone can see it.
    teamOnly:      bool;
}

root_type QuickChat;

/// A minimal version of player data, useful when bandwidth needs to be conserved.
table TinyPlayer {
    location: Vector3;
    rotation: Rotator;
    velocity: Vector3;
    hasWheelContact: bool;
    isSupersonic: bool;
    team: int;
    boost: int;
}

/// A minimal version of the ball, useful when bandwidth needs to be conserved.
table TinyBall {
    location: Vector3;
    velocity: Vector3;
}

/// A minimal version of the game tick packet, useful when bandwidth needs to be conserved.
table TinyPacket {
    players: [TinyPlayer];
    ball: TinyBall;
}

table PredictionSlice {
    /// The moment in game time that this prediction corresponds to.
    /// This corresponds to 'secondsElapsed' in the GameInfo table.
    gameSeconds: float;

    /// The predicted location and motion of the object.
    physics: Physics;
}

table BallPrediction {
    /// A list of places the ball will be at specific times in the future.
    /// It is guaranteed to sorted so that time increases with each slice.
    /// It is NOT guaranteed to have a consistent amount of time between slices.
    slices: [PredictionSlice];
}
